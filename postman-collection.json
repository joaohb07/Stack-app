{
	"info": {
		"_postman_id": "994540e0-b4c7-420a-b049-c56d2c699d79",
		"name": "Task App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    pm.environment.set('auth', pm.response.json().token)",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"<your-name>\",\n    \"password\": \"<your-password>\",\n    \"email\": \"<your-email>\",\n    \"age\": \"<your-age>\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This request aims to Create an user, it does the following:\n\n> - receives name, email, password and age;\n> - creates an user in DB;\n> - generates an authentication token (JSONWebToken)."
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    pm.environment.set('auth', pm.response.json().token)",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"<your-email>\",\n    \"password\": \"<your-password>\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"login"
					]
				},
				"description": "This request aims to Login an user, it does the following:\n\n> - authenticates by email and password;\n> - generates an authentication token (JSONWebToken)."
			},
			"response": []
		},
		{
			"name": "Logout User",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/users/logout",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"logout"
					]
				},
				"description": "This request aims to Logout the current authenticated user, it does the following:\n\n> - authenticates by user by id, coming from the current authentication token;\n> - deletes the current authentication token (JSONWebToken)."
			},
			"response": []
		},
		{
			"name": "Logout All User",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/users/logoutAll",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"logoutAll"
					]
				},
				"description": "This request aims to Logout the current user from all sessions, it does the following:\n\n> - authenticates by user id, coming from the current authentication token;\n> - deletes all authentication tokens from this user (JSONWebToken)."
			},
			"response": []
		},
		{
			"name": "Create Task",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"<task-description>\",\n    \"completed\": \"false\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/tasks",
					"host": [
						"{{url}}"
					],
					"path": [
						"tasks"
					]
				},
				"description": "This request aims to Create an task, it does the following:\n\n> - authenticates the current user;\n> - receives description and completed(saves `false` by default if not set) values;\n> - creates and save task in DB, with the user ID."
			},
			"response": []
		},
		{
			"name": "Read User Profile",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}/users/me",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"me"
					]
				},
				"description": "This request aims to fetch the current authenticated user data, it returns the following:\n\n>authenticated user data (except sensitive information, such as: avatar, password and auth token(s))."
			},
			"response": []
		},
		{
			"name": "Read User By Id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "<user-id>",
							"description": "User Id"
						}
					]
				},
				"description": "This request aims to fetch user data by user id, it returns the following;\n\n>user data  by id (except sensitive information, such as: avatar, password and auth token(s))."
			},
			"response": []
		},
		{
			"name": "Read Tasks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/tasks",
					"host": [
						"{{url}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "limit",
							"value": "3",
							"description": "Limit the number of returned tasks",
							"disabled": true
						},
						{
							"key": "skip",
							"value": "0",
							"description": "Skip the number of returned tasks",
							"disabled": true
						},
						{
							"key": "completed",
							"value": "false:asc",
							"description": "Sort by completed=false||true:asc||desc",
							"disabled": true
						}
					]
				},
				"description": "This request aims to fetch all tasks from the current authenticated user. It can also be filtered by `completed` value."
			},
			"response": []
		},
		{
			"name": "Read Task By Id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/tasks/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"tasks",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "<task-id>",
							"description": "Task id"
						}
					]
				},
				"description": "This request aims to fetch user tasks by task id."
			},
			"response": []
		},
		{
			"name": "Update User",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"<update-user-name>\",\n    \"email\":\"<update-user-name>\" ,\n    \"password\": \"<update-user-password>\",\n    \"age\": \"<update-user-age>\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/users/me",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"me"
					]
				},
				"description": "This request aims to Update the current authenticated user, it does the following:\n\n> - receives name, email, password and age (all optional);\n> - updates the current authenticated user in DB."
			},
			"response": []
		},
		{
			"name": "Update Task",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"description\": \"<new task description>\",\n    \"completed\": \"false\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/tasks/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"tasks",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "<task-id>",
							"description": "Task id."
						}
					]
				},
				"description": "This request aims to Update the current authenticated user task by id, it does the following:\n\n> - receives description and completed (all optional), also task id;\n> - updates the task of the current authenticated user in DB."
			},
			"response": []
		},
		{
			"name": "Delete User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/users/me",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"me"
					]
				},
				"description": "This request aims to delete the current authenticated user, it returns the following:\n\n>authenticated user deleted data (except for sensitive information, such as: avatar, password and auth token(s))."
			},
			"response": []
		},
		{
			"name": "Delete Task",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/tasks/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"tasks",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "<task-id>",
							"description": "Task id."
						}
					]
				},
				"description": "This request aims to delete a task by task id, it returns the following:\n\n>deleted task data."
			},
			"response": []
		},
		{
			"name": "Upload User Avatar",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "avatar",
							"description": "User avatar image. Limit up to 1MB. Only jpeg, jpg and png allowed.",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url}}/users/me/avatar",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"me",
						"avatar"
					]
				},
				"description": "This request aims to upload current authenticated user avatar image icon, it only accepts `.jpeg`, `.jpg` and `.png` file extensions, also file size limit is up to 1 MB. It saves the file binary data into DB."
			},
			"response": []
		},
		{
			"name": "Delete User Avatar",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/users/me/avatar",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"me",
						"avatar"
					]
				},
				"description": "This request aims to delete current authenticated user avatar icon image."
			},
			"response": []
		},
		{
			"name": "Get User Avatar",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users/me/avatar",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"me",
						"avatar"
					]
				},
				"description": "This request aims to fetch current authenticated user avatar image icon."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}